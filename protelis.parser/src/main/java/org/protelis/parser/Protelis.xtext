grammar org.protelis.parser.Protelis with org.eclipse.xtext.xbase.Xtype
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

generate protelis "http://protelis.org"

ProtelisModule:
	(=> 'module' name=ProtelisQualifiedName)?
	(=> imports=ImportSection)?
	(=> definitions+=FunctionDef)*
	program=Block?
;

ImportSection:
	=>importDeclarations+=ImportDeclaration+;

ImportDeclaration: 
	 =>(ProtelisImport) | JavaImport
;

JavaImport:
	name='import' (
		importedType=[jvmTypes::JvmDeclaredType|QualifiedNameInStaticImport]
		(wildcard?='*' | importedMemberName=AID)
	)
;

ProtelisImport:
	name='import' module=[ProtelisModule|ProtelisQualifiedName]
;

ProtelisQualifiedName: ID (':' ID)* ;

FunctionDef: public?="public"? 'def' name=ID '(' (args=VarDefList)? ')' (
	'{' body=Block '}'
	| '=' singleExpression=Expression
	)
;

VarDefList: args += VarDef (',' args += VarDef)* ;

VarDef: name = ID;

Block:
	(statements+=Statement ';'*)+
;

Statement:
	=> Declaration
	| => Assignment
	| => Expression
	| IfWithoutElse
;

Declaration:
	'let' name=VarDef '=' right=Expression
;

Assignment:
	refVar=[VarDef] name='=' right=Expression
;

IfWithoutElse:
	name='if' '(' cond=Expression ')' '{' (then+=Statement (';' then+=Statement)*)? '}'
;

Expression:
 	LogicalOr
;

LogicalOr returns Expression:
 LogicalAnd ({Expression.elements+=current} name='||' elements+=LogicalAnd)*;

LogicalAnd returns Expression:
 Equality ({Expression.elements+=current} name='&&' elements+=Equality)*;

Equality returns Expression:
 Relational ({Expression.elements+=current} name=('=='|'!=') elements+=Relational)*;

Relational returns Expression:
 Addition ({Expression.elements+=current} name=('>'|'>='|'<'|'<=') elements+=Addition)*;

Addition returns Expression:
 Multiplication =>({Expression.elements+=current} name=('+'|'-') elements+=Multiplication)*;

Multiplication returns Expression:
 Power ({Expression.elements+=current} name=('*'|'/'|'%') elements+=Power)*;

Power returns Expression:
 Prefix ({Expression.elements+=current} name=('^') elements+=Prefix)*;

Prefix returns Expression:
    Postfix | (name=('!'|'-') elements+=Postfix);

Postfix returns Expression:
    Primary =>(
    	{Expression.elements+=current}
    	((name='.' elements+=MethodCall) | elements+=InvocationArguments)
    )*
;

MethodCall:
	name=AID arguments=InvocationArguments
;

Primary returns Expression:
	=>Rep
	| =>Share
	| =>NBR
	| =>If
	| =>Lambda
	| =>Builtin
	| VarUse
	| Scalar
	| '(' Expression ')'
;

CallRule: AID (JCallElement+ | ProtelisCallElement+)?;
JCallElement: '::' AID;
ProtelisCallElement: ':' ID;

InvocationArguments:
	=> (name='(' args=ExpressionList? ')' lastArg = KotlinStyleLambda)
	| name='(' args=ExpressionList? ')'
	| lastArg = KotlinStyleLambda
;

ExpressionList: args+=Expression (',' args+=Expression)*;

Lambda:
  KotlinStyleLambda
  | OldLambda
;
KotlinStyleLambda:
  => LongLambda
  | ShortLambda
;
LongLambda: ('{' args=VarDefList name='->' body=Block '}');
ShortLambda: name='{' body=Block '}';
OldLambda:
	=> OldLongLambda
	| OldShortLambda
;
OldShortLambda: (singleArg=VarDef name='->' '{' body=Block '}');
OldLongLambda: '(' (args=VarDefList)? ')' name='->' '{' body=Block '}';

Rep: 
	name='rep' '(' init=RepInitialize ')' '{' body=Block '}' (yields = Yield)?
;
RepInitialize: x=VarDef '<-' w=Expression;
Share: 
	name='share' '(' init=ShareInitialize ')' '{' body=Block '}' (yields = Yield)?
;
ShareInitialize: (local=VarDef ',')? field=VarDef '<-' w=Expression;
Yield: name='yield' '{' body = Block '}';

NBR:
	name='nbr' '(' arg=Expression ')' 
;

If:
	name='if' '(' cond=Expression ')' (
		('{' then=Block '}' 'else' '{' else=Block '}')
//		=> ('{' then=Block '}' 'else' '{' else=Block '}')
//		| (then=Expression 'else' else=Expression)
	)
;

VarUse: reference=[ecore::EObject|CallRule];

Scalar: DoubleVal | StringVal | BooleanVal | TupleVal;

Builtin:
	Self | Env | It | Eval | AlignedMap | Mux | Hood
;
Self: name = 'self';
Env: name = 'env';
It: name = 'it';
Eval: name='eval' '(' arg = Expression ')';
AlignedMap: name='alignedMap' '(' arg=Expression ',' cond=Expression ',' op=Expression ',' default=Expression ')';
Mux:
	name='mux' '(' cond=Expression ')' (
//		=>(then=Expression 'else' else=Expression)
//		|
		('{' then=Block '}' 'else' '{' else=Block '}')
	)
;

Hood:
	BuiltinHoodOp |	GenericHood  
;
GenericHood:
	(name = 'hood' | name = 'hoodPlusSelf') '('
		(reference = VarUse | op = Lambda ) ','
		default = Expression ','
		arg = Expression
	')'
;
BuiltinHoodOp:
	(
	name=BuiltinHood
) inclusive?='PlusSelf'? '(' arg=Expression ')'
;
BuiltinHood:
	'minHood' | 'maxHood' | 'localHood' | 'anyHood' | 'allHood' | 'sumHood' | 'meanHood' | 'unionHood'
;

DoubleVal: val=DOUBLE;
StringVal: val=STRING;
BooleanVal: val=BOOLEAN;
TupleVal: name='[' args = ExpressionList? ']';

AID: =>ID
	| PROTELIS_KEYWORD
;

PROTELIS_KEYWORD:
	'module' | 'def' | 'let'
	| 'rep' | 'share' | 'nbr'
	| BuiltinHood
	| 'PlusSelf'
	| 'hood' | 'hoodPlusSelf'
	| 'self' | 'env' | 'it'
	| 'mux' | 'eval'
;

@Override QualifiedNameInStaticImport:
  (AID '.')+
;
terminal INT returns ecore::EInt: ('0'..'9')+;
DOUBLE returns ecore::EDouble: INT('.'INT)?('e'|'E''-'?INT)?;
BOOLEAN returns ecore::EBoolean: "true" | "false";
